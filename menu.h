//**************************************************
//
// Hackathon ( menu.h )
// Author  : katsuki mizuki
//
//**************************************************
#ifndef _MENU_H_	//このマクロ定義がされてなかったら
#define _MENU_H_	//２重インクルード防止のマクロ定義

//==================================================
// インクルード
//==================================================
#include "texture.h"

//==================================================
// 定義
//==================================================
const int	MAX_OPTION = 56;	// 選択肢の最大数

//==================================================
// 構造体
//==================================================

/*↓ メニューの引数 ↓*/
typedef struct
{
	TEXTURE	texture[MAX_OPTION];	// テクスチャ
	int		nNumUse;				// 使用数
	float	fLeft;					// 左端
	float	fRight;					// 右端
	float	fTop;					// 上端
	float	fBottom;				// 下端
	float	fWidth;					// 選択肢の幅
	float	fHeight;				// 選択肢の高さ
	bool	bSort;					// 並べ方 [ true : 縦 false : 横 ]
}MenuArgument;

/*↓ 枠の引数 ↓*/
typedef struct
{
	TEXTURE		texture;	// テクスチャ
	D3DXCOLOR	col;		// 色
	bool		bUse;		// 枠がいるかどうか [ true : いる false : いらない ]
}FrameArgument;

//==================================================
// プロトタイプ宣言
//==================================================
//--------------------------------------------------
// 初期化
//--------------------------------------------------
void InitMenu(void);

//--------------------------------------------------
// 終了
//--------------------------------------------------
void UninitMenu(void);

//--------------------------------------------------
// 更新
//--------------------------------------------------
void UpdateMenu(void);

//--------------------------------------------------
// 描画
//--------------------------------------------------
void DrawMenu(void);

//--------------------------------------------------
// 設定
// 引数1  : MenuArgument &menu / 構造体 メニュー情報
// 引数2  : FrameArgument &Frame / 構造体 枠の情報
// 返値   ; int / 何番目かのインデックス
//--------------------------------------------------
int SetMenu(const MenuArgument &menu, const FrameArgument &Frame);

//--------------------------------------------------
// 選択肢の色の設定
// 引数1  : int nIdx / メニューのインデックス
// 引数2  : D3DXCOLOR &colStart / 始まりの色
// 引数3  : D3DXCOLOR &colEnd / 終わりの色
//--------------------------------------------------
void SetColorOption(int nIdx, const D3DXCOLOR &colStart, const D3DXCOLOR &colEnd);

//--------------------------------------------------
// 選ばれていない選択肢の色の設定
// 引数1  : int nIdx / メニューのインデックス
// 引数2  : D3DXCOLOR &colDefault / 選ばれてない選択肢の色
//--------------------------------------------------
void SetColorDefaultOption(int nIdx, const D3DXCOLOR &colDefault);

//--------------------------------------------------
// 選択肢の色の初期化
//--------------------------------------------------
void InitColorOption(void);

//--------------------------------------------------
// 選択肢の変更
// 引数  : int nIdx / 選択肢のインデックス
//--------------------------------------------------
void ChangeOption(int nIdx);

//--------------------------------------------------
// 選択肢の決定
//--------------------------------------------------
void DecisionOption(void);

//--------------------------------------------------
// メニューのリセット
// 引数  : int nIdx / メニューのインデックス
//--------------------------------------------------
void ResetMenu(int nIdx);

//--------------------------------------------------
// 描画するかどうか
// 引数1  : int nIdx / メニューのインデックス
// 引数2  : bool bDraw / 描画するかどうか
//--------------------------------------------------
void SetDrawMenu(int nIdx, bool bDraw);

#endif // !_MENU_H_
